read.table("Documents/PhD/LIDo/Rotation 1- Chr X inactivation/Data/R/data for linear model analysis-skew vs expression/data in correct format/Blood/input/blood genes.txt")
genes<-read.table("Documents/PhD/LIDo/Rotation 1- Chr X inactivation/Data/R/data for linear model analysis-skew vs expression/data in correct format/Blood/input/blood genes.txt")
covars<-read.csv("Documents/PhD/LIDo/Rotation 1- Chr X inactivation/Data/R/data for linear model analysis-skew vs expression/data in correct format/Blood/input/covars.binary.csv")
View(covars)
library(textshape)
covars<-column_to_rownames(covars, loc=1)
covars<-column_to_rownames(covars, loc=1)
covars<-column_to_rownames(covars, loc=1)
View(genes)
genes<-read.table("Documents/PhD/LIDo/Rotation 1- Chr X inactivation/Data/R/data for linear model analysis-skew vs expression/data in correct format/Blood/input/blood genes.txt", header=TRUE)
View(genes)
genes<-read.table("Documents/PhD/LIDo/Rotation 1- Chr X inactivation/Data/R/data for linear model analysis-skew vs expression/data in correct format/Blood/input/blood genes.txt", header=TRUE, row.names=TRUE)
View(genes)
genes<-read.table("Documents/PhD/LIDo/Rotation 1- Chr X inactivation/Data/R/data for linear model analysis-skew vs expression/data in correct format/Blood/input/blood genes.txt", header=TRUE, row.names = 1)
View(genes)
indivs<-which(row.names(genes) %in% row.names(covars))
genes<-genes[indivs,]
write.table(covars, "Documents/PhD/LIDo/Rotation 1- Chr X inactivation/Data/Rosalind/blood.covars.txt")
write.table(genes, "Documents/PhD/LIDo/Rotation 1- Chr X inactivation/Data/Rosalind/blood.genes.txt")
setwd("SET")
#Then, read in your data file
#You do this by calling the data file something in R - here i've called it data.CAML
#you read in txt files by calling the function read.delim, for csv's use read.csv
#In R the '<-' symbol is the same as '=' , they can be used interchangeably
data.CAML<-read.delim("YOURFILENAME_DataCalled.txt")
#Then, read in your data file
#You do this by calling the data file something in R - here i've called it data.CAML
#you read in txt files by calling the function read.delim, for csv's use read.csv
#In R the '<-' symbol is the same as '=' , they can be used interchangeably
data.CAML<-read.delim("YOURFILENAME_DataCalled.txt")
cite(plotly)
cite(plotly)
reference(plotly)
reference('plotly')
cite('plotly')
citation('plotly')
citation()
citation('ggplot2')
citation('RColorBrewer')
numbers = [7, 16, 0.3, 0, 15, -4, 5, 3, 15]
numbers = c(7, 16, 0.3, 0, 15, -4, 5, 3, 15)
mean(numbers)
var(numbers)
setwd("~/Documents/PhD/LIDo/Rotation-2/Experiments/2021.05.25_TIRF_ANGLE")
#Read in the data in csv format - the "....csv" will be whatever you called your file
zvslateral<-read.csv("zvslateral.csv")
stagevsangle<-read.csv("stagevsangle.csv")
View(zvslateral)
###Plotting
zvslateral$stage<-as.character(zvslateral$stage)
library(ggplot2)
p<-ggplot(zvslateral, aes(x=change.in.z, y=change.in.lateral, color=stage)) +
geom_point()+
geom_smooth(method=lm,se = F)
p+labs(title="",x ="ΔZ/m",y="Δlateral/m")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
geom_smooth()
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
geom_smooth(method=NULL, se=T)
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
geom_line(data=stagevsangle, aes(x=stage, y=angle.in.deg))
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
spline_angle <-as.data.frame(spline(stagevsangle$stage, stagevsangle$angle.in.deg))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
geom_line(data=spline_angle, aes(x=x, y=y))
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
geom_smooth(method=gam)
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
geom_smooth(method="gam")
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
geom_smooth(method="loess")
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
geom_smooth(method="gam")
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
geom_smooth(method="lm")
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
geom_smooth(method="glm")
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
geom_smooth(method=)
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
stat_smooth(method = "lm", formula = y ~ poly(x, 2), size = 1)
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
stat_smooth(method = "lm", se=F,formula = y ~ poly(x, 2), size = 1)
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
stat_smooth(method = "gam", se=F,formula = y ~ poly(x, 2), size = 1)
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
stat_smooth(method = "gam",formula = y ~ poly(x, 2), size = 1)
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
stat_smooth(method = "gam",se=f,formula = y ~ poly(x, 2), size = 1)
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
stat_smooth(method = "gam",se=F,formula = y ~ poly(x, 2), size = 1)
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
stat_smooth(method = "lm",se=F,formula = y ~ poly(x, 2), size = 1)
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
stat_smooth(method = "lm",formula = y ~ poly(x, 2), size = 1)
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
p<-ggplot(stagevsangle, aes(x=stage, y=angle.in.deg))+
geom_point()+
stat_smooth(method = "lm", se=F,formula = y ~ poly(x, 2), size = 1)
p+labs(x="Stage position", y="Angle of incidence")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),panel.background = element_blank(), axis.line = element_line(colour = "black"))
